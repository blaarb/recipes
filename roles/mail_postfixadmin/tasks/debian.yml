---
- name: check if there is apache
  stat:
    path: /etc/apache2/apache2.conf
  register: apache2_status

- name: check if there is php-fpm
  stat:
    path: /usr/sbin/php-fpm{{ php_version_u }}
  register: php_fpm_status

- name: (if php-fpm) copy nginx config
  blockinfile:
    marker: ''
    regexp: '^\t## postadmin'
    block: |
      rewrite ^/postadmin/?(.*)$ /postfixadmin/$1 redirect;
      rewrite ^/postfixadmin/?(.*)$ /postfixadmin/public/$1 redirect;

      location /postfixadmin/ {
        #auth_basic "Speak, friend, and enter.";
        #auth_basic_user_file conf.d/htpasswd;

        root /var/www;
        fastcgi_index index.php;
        fastcgi_pass unix:/var/run/php-fpm/postfixadmin.sock;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
      }

      location ~* ^/postfixadmin/.+\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|doc|xls|exe|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|js|swf|flv|avi|djvu|mp3)$ {
        root /var/www/;
        allow all;
      }
    path: /etc/nginx/vhosts/{{ ansible_default_ipv4.address }}.conf
  when: php_fpm_status.stat.exists
  notify: restart nginx

- name: (if apache) copy nginx config
  blockinfile:
    marker: ''
    regexp: '^\t## postadmin'
    block: |
      rewrite ^/postadmin/?(.*)$ /postfixadmin/public/$1 redirect;
      rewrite ^/postfixadmin/?(.*)$ /postfixadmin/public/$1 redirect;

      location /postfixadmin/ {
        #auth_basic "Speak, friend, and enter.";
        #auth_basic_user_file conf.d/htpasswd;

        proxy_pass http://127.0.0.1:8080;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_read_timeout 300;
        client_max_body_size 256m;

        proxy_buffer_size 16k;
        proxy_buffers 32 16k;
      }

      location ~* ^/postfixadmin/.+\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|doc|xls|exe|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|js|swf|flv|avi|djvu|mp3)$ {
             root /var/www/;
             allow all;
      }
    path: /etc/nginx/vhosts/{{ ansible_default_ipv4.address }}.conf
  when: apache2_status.stat.exists
  notify: restart nginx

- name: copy php-fpm config
  copy:
    src: centos_fpm.conf
    dest: /etc/php-fpm.d/postfixadmin.conf
  when: php_fpm_status.stat.exists
  notify: restart php-fpm

- name: copy apache2 config
  template:
    src: apache_vhost.conf.j2
    dest: /etc/apache2/sites-available/postfixadmin.conf
  when: apache2_status.stat.exists
  notify: restart apache2

- name: create apache vhost file symlink
  file:
    state: link
    path: /etc/apache2/sites-enabled/postfixadmin.conf
    src: /etc/apache2/sites-available/postfixadmin.conf
  when: apache2_status.stat.exists
  notify: restart apache2

- name: create pfxadmin db
  mysql_db:
    name: postfixadmin
    collation: utf8_unicode_ci

- name: create pfxadmin mysql user
  mysql_user:
    name: postfixadmin
    password: "{{ lookup('password', '/root/06-pfxadmin_db_password chars=ascii_letters,digits length=20') }}"
    priv: 'postfixadmin.*:ALL'
    host: localhost

- name: insert pfxadmin mysql user text into password file
  blockinfile:
    dest: /root/06-pfxadmin_db_password
    insertbefore: BOF
    block: |

      Пароль пользователя postfixadmin в БД postfixadmin:

- name: copy postfixadmin
  copy:
    src: postfixadmin.tar.gz
    dest: /tmp/postfixadmin.tar.gz
  notify: restart dovecot

- name: install postfixadmin
  shell: |
    tar -xvf /tmp/postfixadmin.tar.gz -C /var/www/
    mv /var/www/postfixadmin* /var/www/postfixadmin
    chown -R www-data: /var/www/postfixadmin
    cp /var/www/postfixadmin/config.inc.php /var/www/postfixadmin/config.local.php
    rm /tmp/postfixadmin.tar.gz
  args:
    warn: false

- name: make changes to pfxadmin config file
  lineinfile:
    path: /var/www/postfixadmin/config.local.php
    regexp: "{{ item.regmatch }}"
    line: "{{ item.change }}"
  loop:
    - { regmatch: "^$CONF['configured", change: "$CONF['configured'] = true;" }
    - { regmatch: "^$CONF['database_type", change: "$CONF['database_type'] = 'mysqli';" }
    - { regmatch: "^$CONF['database_host", change: "$CONF['database_host'] = 'localhost';" }
    - { regmatch: "^$CONF['database_user", change: "$CONF['database_user'] = 'postfixadmin';" }
    - { regmatch: "^$CONF['database_password", change: "$CONF['database_password'] = '{{ file_contents }}';" }
    - { regmatch: "^$CONF['database_name", change: "$CONF['database_name'] = 'postfixadmin';" }
    - { regmatch: "^$CONF['domain_path", change: "$CONF['domain_path'] = 'NO';" }
    - { regmatch: "^$CONF['domain_in_mailbox", change: "$CONF['domain_in_mailbox'] = 'YES';" }
  vars:
    file_contents: "{{ lookup('file', '/root/06-pfxadmin_db_password') }}"

- name: create templates_c directory
  file:
    path: /var/www/postfixadmin/templates_c
    state: directory
    owner: www-data
    group: www-data

#TODO
# generate pfxadmin setup password and put hash into /var/www/postfixadmin/config.local.php
# {{ lookup('password', '/root/07-pfxadmin_admin_password chars=ascii_letters,digits length=15') }}

- name: make postfixadmin populate db using setup script
  shell: curl -vL http://{{ ansible_default_ipv4.address }}/postfixadmin/public/setup.php
  args:
    warn: false

- name: add postfixadmin admin user
  shell: bash /var/www/html/postfixadmin/scripts/postfixadmin-cli admin add admin@{{ vhost }} --password Strong_pass22# --password2 Strong_pass22# --superadmin 1 --active 1
